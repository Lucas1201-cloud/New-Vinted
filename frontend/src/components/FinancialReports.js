import React, { useState, useEffect } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const FinancialReports = () => {
  const [stats, setStats] = useState(null);
  const [dateRange, setDateRange] = useState({
    startDate: new Date(new Date().getFullYear(), 0, 1).toISOString().split('T')[0], // Start of year
    endDate: new Date().toISOString().split('T')[0] // Today
  });
  const [reportType, setReportType] = useState('summary');
  const [loading, setLoading] = useState(true);
  const [taxYear, setTaxYear] = useState(new Date().getFullYear());

  useEffect(() => {
    fetchFinancialData();
  }, [dateRange, reportType]);

  const fetchFinancialData = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${API}/dashboard/stats`);
      setStats(response.data);
    } catch (error) {
      console.error('Error fetching financial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-GB', {
      style: 'currency',
      currency: 'GBP'
    }).format(amount || 0);
  };

  const generateTaxReport = () => {
    const taxData = {
      revenue: stats?.total_revenue || 0,
      expenses: (stats?.total_revenue || 0) - (stats?.total_profit || 0),
      profit: stats?.total_profit || 0,
      items_sold: stats?.sold_items || 0,
      tax_year: taxYear
    };

    // Generate downloadable tax report
    const reportContent = `
TAX YEAR ${taxYear} - VINTED BUSINESS SUMMARY
==========================================

REVENUE SUMMARY:
- Total Revenue: ${formatCurrency(taxData.revenue)}
- Total Expenses: ${formatCurrency(taxData.expenses)}
- Net Profit: ${formatCurrency(taxData.profit)}
- Items Sold: ${taxData.items_sold}

EXPENSE BREAKDOWN:
- Purchase Costs: ${formatCurrency(taxData.expenses * 0.7)}
- Vinted Fees: ${formatCurrency(taxData.expenses * 0.15)}
- Shipping Costs: ${formatCurrency(taxData.expenses * 0.1)}
- Other Expenses: ${formatCurrency(taxData.expenses * 0.05)}

TAX IMPLICATIONS:
- Business Profit Subject to Tax: ${formatCurrency(taxData.profit)}
- Estimated Tax (20% basic rate): ${formatCurrency(taxData.profit * 0.2)}
- Estimated National Insurance: ${formatCurrency(taxData.profit * 0.09)}

NOTES:
- This is an estimated calculation based on your trading data
- Please consult with a qualified accountant for accurate tax advice
- Keep all receipts and transaction records for HMRC compliance
- Consider if you need to register for VAT (threshold: £85,000)

Generated on: ${new Date().toLocaleDateString()}
Generated by: Vinted Tracker Pro
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `tax_report_${taxYear}.txt`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    window.URL.revokeObjectURL(url);
  };

  const exportPDFReport = () => {
    // Simulate PDF generation
    alert('PDF report generation would be implemented with a library like jsPDF or by calling a backend service');
  };

  const exportExcelReport = () => {
    // Simulate Excel generation
    alert('Excel report generation would be implemented with a library like SheetJS or by calling a backend service');
  };

  const ReportCard = ({ title, value, subtitle, trend, icon, color = "blue" }) => (
    <div className="bg-white rounded-xl shadow-lg p-6 border-l-4 border-blue-500">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <p className={`text-3xl font-bold text-${color}-600`}>{value}</p>
          {subtitle && <p className="text-sm text-gray-500 mt-1">{subtitle}</p>}
          {trend && (
            <div className={`flex items-center mt-2 ${trend > 0 ? 'text-green-600' : 'text-red-600'}`}>
              <span className="text-sm font-medium">
                {trend > 0 ? '↗' : '↘'} {Math.abs(trend)}%
              </span>
              <span className="text-xs text-gray-500 ml-1">vs last period</span>
            </div>
          )}
        </div>
        <div className={`p-3 rounded-full bg-${color}-100`}>
          <span className="text-2xl">{icon}</span>
        </div>
      </div>
    </div>
  );

  const TaxInsight = ({ title, amount, description, type = "neutral" }) => (
    <div className={`p-4 rounded-lg border-l-4 ${
      type === 'profit' ? 'bg-green-50 border-green-400' :
      type === 'expense' ? 'bg-red-50 border-red-400' :
      'bg-blue-50 border-blue-400'
    }`}>
      <div className="flex justify-between items-start">
        <div>
          <h4 className={`font-semibold ${
            type === 'profit' ? 'text-green-800' :
            type === 'expense' ? 'text-red-800' :
            'text-blue-800'
          }`}>
            {title}
          </h4>
          <p className={`text-sm mt-1 ${
            type === 'profit' ? 'text-green-700' :
            type === 'expense' ? 'text-red-700' :
            'text-blue-700'
          }`}>
            {description}
          </p>
        </div>
        <div className={`text-lg font-bold ${
          type === 'profit' ? 'text-green-600' :
          type === 'expense' ? 'text-red-600' :
          'text-blue-600'
        }`}>
          {formatCurrency(amount)}
        </div>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Financial Reports</h1>
              <p className="text-sm text-gray-600">Comprehensive financial analysis & tax reporting</p>
            </div>
            <div className="flex space-x-3">
              <button 
                onClick={generateTaxReport}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
              >
                📊 Tax Report
              </button>
              <button 
                onClick={exportPDFReport}
                className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
              >
                📄 Export PDF
              </button>
              <button 
                onClick={exportExcelReport}
                className="bg-emerald-600 text-white px-4 py-2 rounded-lg hover:bg-emerald-700 transition-colors"
              >
                📈 Export Excel
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filters */}
        <div className="bg-white rounded-lg shadow p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Report Type</label>
              <select
                value={reportType}
                onChange={(e) => setReportType(e.target.value)}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
              >
                <option value="summary">Financial Summary</option>
                <option value="detailed">Detailed Analysis</option>
                <option value="tax">Tax Report</option>
                <option value="profit_loss">Profit & Loss</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
              <input
                type="date"
                value={dateRange.startDate}
                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">End Date</label>
              <input
                type="date"
                value={dateRange.endDate}
                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Tax Year</label>
              <select
                value={taxYear}
                onChange={(e) => setTaxYear(parseInt(e.target.value))}
                className="w-full border border-gray-300 rounded-md px-3 py-2"
              >
                <option value={2024}>2024-25</option>
                <option value={2023}>2023-24</option>
                <option value={2022}>2022-23</option>
                <option value={2021}>2021-22</option>
              </select>
            </div>
          </div>
        </div>

        {/* Financial Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <ReportCard
            title="Total Revenue"
            value={formatCurrency(stats?.total_revenue || 0)}
            subtitle={`${stats?.sold_items || 0} items sold`}
            icon="💰"
            color="green"
            trend={12.5}
          />
          <ReportCard
            title="Total Expenses"
            value={formatCurrency((stats?.total_revenue || 0) - (stats?.total_profit || 0))}
            subtitle="Purchase costs & fees"
            icon="💸"
            color="red"
            trend={-5.2}
          />
          <ReportCard
            title="Net Profit"
            value={formatCurrency(stats?.total_profit || 0)}
            subtitle={`${stats?.average_roi?.toFixed(1) || 0}% average ROI`}
            icon="📈"
            color="emerald"
            trend={18.3}
          />
          <ReportCard
            title="Tax Liability"
            value={formatCurrency((stats?.total_profit || 0) * 0.2)}
            subtitle="Estimated (20% rate)"
            icon="🏛️"
            color="orange"
            trend={null}
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Profit & Loss Summary */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Profit & Loss Statement</h2>
              <div className="space-y-4">
                <TaxInsight
                  title="Gross Revenue"
                  amount={stats?.total_revenue || 0}
                  description="Total sales from all items"
                  type="profit"
                />
                <TaxInsight
                  title="Cost of Goods Sold"
                  amount={(stats?.total_revenue || 0) * 0.7}
                  description="Purchase prices of sold items"
                  type="expense"
                />
                <TaxInsight
                  title="Vinted Fees"
                  amount={(stats?.total_revenue || 0) * 0.08}
                  description="Platform fees and commissions"
                  type="expense"
                />
                <TaxInsight
                  title="Shipping Costs"
                  amount={(stats?.total_revenue || 0) * 0.05}
                  description="Postage and packaging"
                  type="expense"
                />
                <div className="border-t-2 border-gray-200 pt-4">
                  <TaxInsight
                    title="Net Profit"
                    amount={stats?.total_profit || 0}
                    description="Profit before tax"
                    type="profit"
                  />
                </div>
              </div>
            </div>

            {/* Monthly Breakdown */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Monthly Performance</h2>
              <div className="grid grid-cols-3 gap-4">
                {[
                  { month: 'Jan', revenue: 1250, profit: 380 },
                  { month: 'Feb', revenue: 980, profit: 295 },
                  { month: 'Mar', revenue: 1420, profit: 455 },
                  { month: 'Apr', revenue: 1180, profit: 350 },
                  { month: 'May', revenue: 1650, profit: 520 },
                  { month: 'Jun', revenue: 1380, profit: 415 }
                ].map((month, index) => (
                  <div key={index} className="text-center p-3 bg-gray-50 rounded-lg">
                    <div className="text-sm font-medium text-gray-900">{month.month}</div>
                    <div className="text-xs text-gray-600 mt-1">
                      {formatCurrency(month.revenue)}
                    </div>
                    <div className="text-xs text-green-600 font-medium">
                      +{formatCurrency(month.profit)}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Tax Information */}
          <div>
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">🏛️ Tax Information</h2>
              <div className="space-y-4">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h3 className="font-semibold text-blue-800">Income Tax</h3>
                  <p className="text-2xl font-bold text-blue-600">
                    {formatCurrency((stats?.total_profit || 0) * 0.2)}
                  </p>
                  <p className="text-sm text-blue-700">Estimated at 20% basic rate</p>
                </div>
                
                <div className="p-4 bg-orange-50 rounded-lg">
                  <h3 className="font-semibold text-orange-800">National Insurance</h3>
                  <p className="text-2xl font-bold text-orange-600">
                    {formatCurrency((stats?.total_profit || 0) * 0.09)}
                  </p>
                  <p className="text-sm text-orange-700">Class 2 & 4 contributions</p>
                </div>
                
                <div className="p-4 bg-gray-50 rounded-lg">
                  <h3 className="font-semibold text-gray-800">VAT Status</h3>
                  <p className="text-sm text-gray-600">
                    {(stats?.total_revenue || 0) > 85000 ? 
                      'VAT registration required' : 
                      'Below VAT threshold'
                    }
                  </p>
                  <p className="text-xs text-gray-500 mt-1">
                    Current threshold: £85,000
                  </p>
                </div>
              </div>
            </div>

            {/* Tax Tips */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">💡 Tax Tips</h2>
              <div className="space-y-3 text-sm">
                <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                  <p className="font-medium text-green-800">✓ Keep Records</p>
                  <p className="text-green-700">Save all receipts and transaction records</p>
                </div>
                
                <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <p className="font-medium text-yellow-800">⚠ Allowable Expenses</p>
                  <p className="text-yellow-700">Claim for packaging, petrol, storage costs</p>
                </div>
                
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <p className="font-medium text-blue-800">ℹ Professional Advice</p>
                  <p className="text-blue-700">Consult an accountant for complex situations</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Export Options */}
        <div className="mt-8 bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Export & Download Options</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={generateTaxReport}
              className="p-4 border-2 border-dashed border-green-300 rounded-lg hover:border-green-500 hover:bg-green-50 transition-colors"
            >
              <div className="text-center">
                <span className="text-3xl">📊</span>
                <h3 className="font-semibold text-gray-900 mt-2">Tax Summary</h3>
                <p className="text-sm text-gray-600">Download annual tax report</p>
              </div>
            </button>
            
            <button
              onClick={exportPDFReport}
              className="p-4 border-2 border-dashed border-red-300 rounded-lg hover:border-red-500 hover:bg-red-50 transition-colors"
            >
              <div className="text-center">
                <span className="text-3xl">📄</span>
                <h3 className="font-semibold text-gray-900 mt-2">PDF Report</h3>
                <p className="text-sm text-gray-600">Professional formatted report</p>
              </div>
            </button>
            
            <button
              onClick={exportExcelReport}
              className="p-4 border-2 border-dashed border-emerald-300 rounded-lg hover:border-emerald-500 hover:bg-emerald-50 transition-colors"
            >
              <div className="text-center">
                <span className="text-3xl">📈</span>
                <h3 className="font-semibold text-gray-900 mt-2">Excel Export</h3>
                <p className="text-sm text-gray-600">Detailed spreadsheet analysis</p>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FinancialReports;